generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(uuid())
  email                 String    @unique
  password              String    @db.VarChar(255)
  role                  Role      @default(CUSTOMER)
  name                  String?
  cart                  Cart?
  reset_pin             String?
  profile_picture       String?
  password_reset_token  String?
  login_verified        Boolean   @default(false)
  verification_attempts Int?
  disabled              Boolean   @default(false)
  password_reset_time   DateTime? @db.Timestamp
  reset_pin_verified    Boolean   @default(false)

  orders          Order[]
  reviews         Review[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  productsCreated Product[] @relation("ProductCreator")
  productsVended  Product[] @relation("ProductVendor")
}

enum Role {
  CUSTOMER
  ADMIN
  VENDOR
}

model Product {
  id          String     @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  category    String
  imageUrl    String?
  userId      String
  vendorId    String
  reviews     Review[]
  cartItems   CartItem[]

  vendor    User?       @relation("ProductVendor", fields: [vendorId], references: [id])
  user      User?       @relation("ProductCreator", fields: [userId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  OrderItem OrderItem[]
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String @id @default(uuid())
  cartId    String
  productId String
  quantity  Int    @default(1)

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  totalPrice Decimal
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())

  user       User?       @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  payment    Payment?

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Payment {
  id        String        @id @default(uuid())
  orderId   String        @unique
  amount    Decimal
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())

  order Order @relation(fields: [orderId], references: [id])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}
